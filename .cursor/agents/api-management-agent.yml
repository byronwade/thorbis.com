name: api-management-agent
description: "Automated API management agent for maintaining the consolidated Thorbis API system"
version: "1.0.0"

# This agent automatically manages the consolidated API by:
# 1. Detecting when new features are added to individual apps
# 2. Creating corresponding API endpoints in the consolidated API
# 3. Updating existing endpoints when schemas change  
# 4. Removing deprecated endpoints
# 5. Maintaining API documentation
# 6. Ensuring security and performance standards

triggers:
  - name: "feature_added"
    description: "When new features are added to any app"
    patterns:
      - "apps/*/src/app/**/*.tsx"
      - "apps/*/src/components/**/*.tsx"
      - "apps/*/src/lib/**/*.ts"
    exclude:
      - "apps/site/**" # Don't trigger on site changes to prevent recursion
      - "**/*.test.ts"
      - "**/*.spec.ts"
  
  - name: "schema_changed"
    description: "When database schemas or types change"
    patterns:
      - "packages/schemas/**/*.ts"
      - "apps/*/src/lib/database/**/*.ts"
      - "apps/*/schema.sql"
  
  - name: "api_route_changed"
    description: "When individual app API routes are modified"
    patterns:
      - "apps/*/src/app/api/**/*.ts"
    exclude:
      - "apps/site/src/app/api/**" # Don't trigger on consolidated API changes

capabilities:
  - code_analysis
  - code_generation
  - file_operations
  - schema_validation
  - documentation_generation

tools:
  - name: "analyze_feature_changes"
    description: "Analyzes what features were added/changed and determines API requirements"
    
  - name: "generate_api_endpoint"
    description: "Generates new API endpoint based on feature analysis"
    
  - name: "update_existing_endpoint"
    description: "Updates existing API endpoint when schemas change"
    
  - name: "validate_api_standards"
    description: "Ensures all API endpoints follow Thorbis standards"
    
  - name: "update_documentation"
    description: "Updates OpenAPI documentation when endpoints change"

workflow:
  on_trigger:
    - step: "analyze_changes"
      description: "Analyze what changed and determine if API updates are needed"
      actions:
        - scan_changed_files
        - identify_data_models
        - detect_new_features
        - check_existing_api_coverage
    
    - step: "plan_api_changes"
      description: "Plan what API changes are needed"
      actions:
        - determine_industry_namespace
        - identify_required_endpoints
        - check_for_breaking_changes
        - plan_migration_strategy
    
    - step: "implement_changes"
      description: "Implement the API changes"
      actions:
        - generate_new_endpoints
        - update_existing_endpoints
        - apply_middleware_patterns
        - add_validation_schemas
        - implement_rls_policies
    
    - step: "validate_implementation"
      description: "Validate the implementation meets standards"
      actions:
        - run_api_tests
        - validate_security_patterns
        - check_performance_requirements
        - verify_documentation_updated
    
    - step: "cleanup_old_apis"
      description: "Mark old API routes as deprecated and plan removal"
      actions:
        - identify_replaced_endpoints
        - add_deprecation_warnings
        - create_migration_guide
        - schedule_removal

patterns:
  api_endpoint_structure: |
    /**
     * Thorbis Business OS - {Industry} {Resource} API (Consolidated)
     * 
     * Auto-generated by API Management Agent
     * Source: {source_app}/src/app/{source_path}
     */
    
    import { NextRequest, NextResponse } from 'next/server'
    import { apiMiddleware, type ApiContext } from '@/lib/api-middleware'
    import { z } from 'zod'
    
    // Generated schemas and handlers...
  
  middleware_application: |
    return apiMiddleware(
      request,
      async (context: ApiContext) => {
        // Implementation
      },
      {
        industry: '{industry}',
        permissions: ['{resource}:read'],
        requireAuth: true,
        rateLimit: {
          windowMs: 15 * 60 * 1000,
          maxRequests: {default_rate_limit}
        }
      }
    )

industry_mappings:
  hs: "Home Services"
  rest: "Restaurant"  
  auto: "Auto Services"
  ret: "Retail"
  courses: "Learning"
  payroll: "Payroll"

resource_patterns:
  # Detect common resource patterns across apps
  - pattern: "**/work-orders/**"
    industry: "hs"
    resource: "work-orders"
    permissions: ["work_orders:read", "work_orders:create", "work_orders:update"]
    
  - pattern: "**/orders/**"
    industries: ["rest", "ret"]
    resource: "orders"
    permissions: ["orders:read", "orders:create", "orders:update"]
    
  - pattern: "**/repair-orders/**"
    industry: "auto"
    resource: "repair-orders"
    permissions: ["repair_orders:read", "repair_orders:create", "repair_orders:update"]
    
  - pattern: "**/courses/**"
    industry: "courses"
    resource: "courses"
    permissions: ["courses:read", "courses:create", "courses:update"]
    
  - pattern: "**/products/**"
    industry: "ret"
    resource: "products"
    permissions: ["products:read", "products:create", "products:update"]

security_requirements:
  authentication: true
  authorization: true
  rate_limiting: true
  input_validation: true
  output_sanitization: true
  audit_logging: true
  pii_redaction: true
  idempotency: true # for write operations

performance_requirements:
  max_response_time_ms: 300
  cache_strategy: "stale-while-revalidate"
  compression: true
  pagination_required: true # for list endpoints
  max_page_size: 100

validation_rules:
  - name: "endpoint_naming"
    description: "Ensure endpoints follow REST conventions"
    pattern: "/api/v2/{industry}/{resource}"
    
  - name: "http_methods"
    description: "Use appropriate HTTP methods"
    rules:
      - "GET for reading data"
      - "POST for creating resources"
      - "PUT for full updates"
      - "PATCH for partial updates"
      - "DELETE for removing resources"
  
  - name: "error_responses"
    description: "Standardized error response format"
    schema: |
      {
        "error": {
          "code": "ERROR_CODE",
          "message": "Human readable message",
          "details": {},
          "requestId": "unique_request_id"
        }
      }

monitoring:
  metrics:
    - "api_requests_total"
    - "api_request_duration_seconds"
    - "api_errors_total"
    - "api_rate_limit_exceeded_total"
  
  alerts:
    - name: "high_error_rate"
      condition: "error_rate > 5%"
      action: "notify_team"
    
    - name: "slow_response_time"
      condition: "p95_response_time > 500ms"
      action: "investigate_performance"

documentation:
  openapi_spec: "apps/site/src/app/api/v2/docs/route.ts"
  update_on_change: true
  include_examples: true
  include_schemas: true
  
notifications:
  on_success:
    - type: "comment"
      message: "✅ API endpoints successfully updated for {changed_features}"
  
  on_failure:
    - type: "comment"
      message: "❌ Failed to update API endpoints. Manual review required."
  
  on_deprecation:
    - type: "issue"
      title: "API Deprecation Notice: {endpoint}"
      body: |
        The following API endpoint has been deprecated:
        - Endpoint: {endpoint}
        - Reason: {reason}
        - Migration: {migration_guide}
        - Removal Date: {removal_date}

integration:
  ci_cd: true
  pre_commit_hooks: true
  automated_testing: true
  code_review_required: false # Agent can auto-merge simple updates