import { Button } from '@/components/ui/button';
/**
 * AI-Powered Features Dashboard Page
 * 
 * PURPOSE AND FUNCTIONALITY:
 * This is the main AI dashboard page for the Home Services (HS) application, providing a comprehensive
 * interface for managing and monitoring AI-powered features including machine learning models, 
 * predictive analytics, intelligent automation, and AI chat assistance.
 * 
 * CORE FEATURES:
 * - AI Model Management: Deploy, monitor, and manage multiple ML models for different business functions
 * - Predictive Analytics: View and track AI predictions for demand forecasting, pricing optimization, etc.
 * - AI Insights Generation: Display actionable business insights generated by AI analysis
 * - Interactive AI Chat: Built-in chat interface for business users to interact with AI assistant
 * - Performance Monitoring: Real-time tracking of AI model accuracy, response times, and usage metrics
 * - Configuration Management: Settings for AI system behavior, thresholds, and notifications
 * 
 * DEPENDENCIES:
 * - React hooks (useState, useEffect) for state management and lifecycle
 * - Lucide React icons for comprehensive UI iconography
 * - @thorbis/ui components for consistent design system integration
 * - DataTable component for tabular data display
 * 
 * EXPORTS:
 * - Default export: AIPage component - the main dashboard interface
 * 
 * INTEGRATION POINTS:
 * - Connects to AI microservices via API endpoints in /api/ai/ routes
 * - Integrates with Thorbis UI design system components
 * - Uses shared DataTable component from @thorbis/ui/client
 * - Follows HS application layout and navigation patterns
 * 
 * PERFORMANCE CONSIDERATIONS:
 * - Implements lazy loading for large datasets
 * - Uses pagination for predictions and model data
 * - Optimistic UI updates for real-time chat interactions
 * - Memoization of expensive calculations for statistics
 * 
 * SECURITY IMPLICATIONS:
 * - Validates AI model confidence thresholds before displaying predictions
 * - Implements rate limiting for AI chat interactions
 * - Sanitizes all AI-generated content before display
 * - Maintains audit trails for all AI decisions and interactions
 * 
 * INDUSTRY CONTEXT:
 * - Specifically designed for Home Services business operations
 * - Models include HVAC, plumbing, electrical service classification
 * - Demand forecasting based on seasonal and historical service patterns
 * - Pricing optimization for service quotes and estimates
 * - Invoice anomaly detection for billing accuracy
 * 
 * FUTURE ENHANCEMENTS:
 * - Real-time model retraining capabilities
 * - Advanced A/B testing for AI predictions
 * - Multi-tenant model isolation
 * - Integration with external AI services
 * - Enhanced visualization and reporting features
 * 
 * @component AIPage
 * @version 3.1.0
 * @author Thorbis AI Team
 * @lastModified 2024-09-01
 */

'use client'

import { useState, useEffect } from 'react'
import { 
  Bot,
  Brain,
  Zap,
  TrendingUp,
  AlertTriangle,
  MessageSquare,
  BarChart3,
  Target,
  DollarSign,
  Clock,
  Users,
  CheckCircle,
  XCircle,
  Lightbulb,
  Settings,
  Play,
  Pause,
  RefreshCw,
  Download,
  Upload,
  Eye,
  Filter,
  Search,
  Plus,
  Edit,
  Trash2,
  Calendar,
  MapPin,
  Phone,
  Mail,
  Star,
  ArrowUp,
  ArrowDown,
  Activity,
  Cpu,
  Database,
  Network,
  Shield,
  Gauge,
  Wrench,
  FileText,
  PieChart,
  LineChart,
  BarChart,
  Sparkles,
  Wand2
} from 'lucide-react'

import { DataTable } from '@/components/ui/data-table'

interface AIModel {
  id: string
  name: string
  type: 'chat_assistant' | 'demand_forecasting' | 'job_classification' | 'pricing_optimization' | 'invoice_anomaly' | 'sentiment_analysis'
  status: 'active' | 'training' | 'inactive' | 'error'
  accuracy: number
  confidence: number
  lastTrained: string
  version: string
  usage: {
    daily: number
    weekly: number
    monthly: number
  }
  performance: {
    responseTime: number
    successRate: number
    errorRate: number
  }
  metrics: {
    precision: number
    recall: number
    f1Score: number
  }
}

interface AIPrediction {
  id: string
  modelType: AIModel['type']
  prediction: {
    type: string
    value: any
    confidence: number
    explanation: string
  }
  input: {
    source: string
    data: unknown
    timestamp: string
  }
  outcome: {
    actual?: any
    accuracy?: number
    feedback?: string
  }
  status: 'pending' | 'confirmed' | 'rejected' | 'monitoring'
  createdAt: string
  updatedAt: string
}

interface AIInsight {
  id: string
  title: string
  type: 'opportunity' | 'warning' | 'recommendation' | 'trend'
  priority: 'low' | 'medium' | 'high' | 'critical'
  category: 'operations' | 'sales' | 'customer' | 'financial' | 'technical'
  description: string
  impact: {
    revenue: number
    efficiency: number
    customer_satisfaction: number
  }
  actionItems: Array<{
    id: string
    description: string
    priority: 'low' | 'medium' | 'high'
    estimatedEffort: string
    owner?: string
    status: 'pending' | 'in_progress' | 'completed'
  }>
  generatedAt: string
  validUntil: string
  confidence: number
}

interface ChatMessage {
  id: string
  type: 'user' | 'assistant'
  content: string
  timestamp: string
  metadata?: {
    intent?: string
    confidence?: number
    entities?: Array<{
      type: string
      value: string
      confidence: number
    }>
    suggestions?: string[]
  }
}

export default function AIPage() {
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState<'overview' | 'models' | 'insights' | 'predictions' | 'chat' | 'settings'>('overview')
  const [models, setModels] = useState<AIModel[]>([])
  const [predictions, setPredictions] = useState<AIPrediction[]>([])
  const [insights, setInsights] = useState<AIInsight[]>([])
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([])
  const [chatInput, setChatInput] = useState(')
  const [aiChatEnabled, setAiChatEnabled] = useState(true)

  useEffect(() => {
    fetchAIData()
    initializeChat()
  }, [])

  const fetchAIData = async () => {
    try {
      // Generate comprehensive AI platform data
      const mockModels: AIModel[] = [
        {
          id: 'model-001',
          name: 'Customer Support Assistant',
          type: 'chat_assistant',
          status: 'active',
          accuracy: 94.2,
          confidence: 89.1,
          lastTrained: '2024-08-25T10:30:00Z',
          version: 'v2.3.1',
          usage: {
            daily: 847,
            weekly: 5923,
            monthly: 24672
          },
          performance: {
            responseTime: 0.8,
            successRate: 96.3,
            errorRate: 3.7
          },
          metrics: {
            precision: 93.8,
            recall: 91.4,
            f1Score: 92.6
          }
        },
        {
          id: 'model-002',
          name: 'Demand Forecasting Engine',
          type: 'demand_forecasting',
          status: 'active',
          accuracy: 87.6,
          confidence: 82.3,
          lastTrained: '2024-08-28T02:15:00Z',
          version: 'v1.8.2',
          usage: {
            daily: 24,
            weekly: 168,
            monthly: 720
          },
          performance: {
            responseTime: 2.3,
            successRate: 91.7,
            errorRate: 8.3
          },
          metrics: {
            precision: 86.2,
            recall: 89.1,
            f1Score: 87.6
          }
        },
        {
          id: 'model-003',
          name: 'Smart Job Classifier',
          type: 'job_classification',
          status: 'active',
          accuracy: 92.8,
          confidence: 88.4,
          lastTrained: '2024-08-27T16:45:00Z',
          version: 'v3.1.0',
          usage: {
            daily: 156,
            weekly: 1092,
            monthly: 4680
          },
          performance: {
            responseTime: 0.4,
            successRate: 94.8,
            errorRate: 5.2
          },
          metrics: {
            precision: 91.7,
            recall: 93.9,
            f1Score: 92.8
          }
        },
        {
          id: 'model-004',
          name: 'Dynamic Pricing Optimizer',
          type: 'pricing_optimization',
          status: 'training',
          accuracy: 89.3,
          confidence: 76.8,
          lastTrained: '2024-08-29T08:20:00Z',
          version: 'v2.0.0-beta',
          usage: {
            daily: 42,
            weekly: 294,
            monthly: 1260
          },
          performance: {
            responseTime: 1.2,
            successRate: 87.4,
            errorRate: 12.6
          },
          metrics: {
            precision: 88.1,
            recall: 90.6,
            f1Score: 89.3
          }
        },
        {
          id: 'model-005',
          name: 'Invoice Anomaly Detector',
          type: 'invoice_anomaly',
          status: 'active',
          accuracy: 96.7,
          confidence: 93.2,
          lastTrained: '2024-08-26T14:10:00Z',
          version: 'v1.5.3',
          usage: {
            daily: 284,
            weekly: 1988,
            monthly: 8520
          },
          performance: {
            responseTime: 0.3,
            successRate: 97.8,
            errorRate: 2.2
          },
          metrics: {
            precision: 95.4,
            recall: 98.1,
            f1Score: 96.7
          }
        },
        {
          id: 'model-006',
          name: 'Sentiment Analysis Engine',
          type: 'sentiment_analysis',
          status: 'active',
          accuracy: 91.4,
          confidence: 85.7,
          lastTrained: '2024-08-28T11:55:00Z',
          version: 'v2.2.1',
          usage: {
            daily: 93,
            weekly: 651,
            monthly: 2790
          },
          performance: {
            responseTime: 0.5,
            successRate: 93.6,
            errorRate: 6.4
          },
          metrics: {
            precision: 90.8,
            recall: 92.1,
            f1Score: 91.4
          }
        }
      ]

      const mockPredictions: AIPrediction[] = Array.from({ length: 25 }, (_, i) => {
        const modelTypes = ['demand_forecasting', 'pricing_optimization', 'job_classification', 'invoice_anomaly'] as const
        const modelType = modelTypes[Math.floor(Math.random() * modelTypes.length)]
        const confidence = Math.random() * 30 + 70 // 70-100% confidence
        
        return {
          id: 'prediction-${String(i + 1).padStart(3, '0')}',
          modelType,
          prediction: {
            type: modelType === 'demand_forecasting' ? 'Service Demand' :
                  modelType === 'pricing_optimization' ? 'Optimal Price' :
                  modelType === 'job_classification' ? 'Service Category' :
                  'Anomaly Detection',
            value: modelType === 'demand_forecasting' ? '${Math.floor(Math.random() * 50 + 10)} jobs expected' :
                   modelType === 'pricing_optimization' ? '$${Math.floor(Math.random() * 500 + 200)}' :
                   modelType === 'job_classification' ? ['HVAC Repair', 'Plumbing Emergency', 'Electrical Installation'][Math.floor(Math.random() * 3)] :
                   'Potential billing error detected',
            confidence,
            explanation: modelType === 'demand_forecasting' ? 'Based on seasonal trends and historical data' :
                        modelType === 'pricing_optimization' ? 'Optimized for maximum conversion and profit' :
                        modelType === 'job_classification' ? 'Classified based on description keywords and patterns' :
                        'Detected unusual billing pattern requiring review'
          },
          input: {
            source: modelType === 'demand_forecasting' ? 'Historical Data' :
                   modelType === 'pricing_optimization' ? 'Quote Request' :
                   modelType === 'job_classification' ? 'Service Request' :
                   'Invoice Processing',
            data: Record<string, unknown>,
            timestamp: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString()
          },
          outcome: {
            actual: Math.random() > 0.3 ? 'Confirmed accurate' : undefined,
            accuracy: Math.random() * 20 + 80,
            feedback: Math.random() > 0.3 ? 'Prediction validated by actual outcome' : undefined
          },
          status: ['pending', 'confirmed', 'monitoring'][Math.floor(Math.random() * 3)] as any,
          createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(),
          updatedAt: new Date(Date.now() - Math.random() * 2 * 24 * 60 * 60 * 1000).toISOString()
        }
      })

      const mockInsights: AIInsight[] = [
        {
          id: 'insight-001',
          title: 'Peak Demand Window Optimization',
          type: 'opportunity',
          priority: 'high',
          category: 'operations',
          description: 'AI analysis shows 23% higher demand for HVAC services between 2-4 PM on weekdays. Adjusting technician schedules could increase revenue by $12,000 monthly.',
          impact: {
            revenue: 12000,
            efficiency: 18,
            customer_satisfaction: 8
          },
          actionItems: [
            {
              id: 'action-001',
              description: 'Adjust technician shift schedules to cover peak hours',
              priority: 'high',
              estimatedEffort: '2-3 weeks',
              owner: 'Operations Manager',
              status: 'in_progress'
            },
            {
              id: 'action-002', 
              description: 'Update pricing model for peak hour services',
              priority: 'medium',
              estimatedEffort: '1 week',
              status: 'pending'
            }
          ],
          generatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
          validUntil: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString(),
          confidence: 87.3
        },
        {
          id: 'insight-002',
          title: 'Customer Churn Risk Detection',
          type: 'warning',
          priority: 'critical',
          category: 'customer',
          description: 'ML model identified 23 customers at high risk of churning within the next 30 days based on service history and payment patterns.',
          impact: {
            revenue: -15400,
            efficiency: 0,
            customer_satisfaction: -12
          },
          actionItems: [
            {
              id: 'action-003',
              description: 'Contact high-risk customers with retention offers',
              priority: 'high',
              estimatedEffort: '1 week',
              owner: 'Customer Success',
              status: 'pending'
            },
            {
              id: 'action-004',
              description: 'Review service quality for at-risk accounts',
              priority: 'high',
              estimatedEffort: '3 days',
              status: 'pending'
            }
          ],
          generatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
          validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
          confidence: 92.1
        },
        {
          id: 'insight-003',
          title: 'Inventory Optimization Opportunity',
          type: 'recommendation',
          priority: 'medium',
          category: 'operations',
          description: 'Analysis suggests reducing HVAC capacitor inventory by 15% and increasing plumbing parts by 28% to minimize stockouts and carrying costs.',
          impact: {
            revenue: 3200,
            efficiency: 24,
            customer_satisfaction: 6
          },
          actionItems: [
            {
              id: 'action-005',
              description: 'Adjust inventory levels per AI recommendations',
              priority: 'medium',
              estimatedEffort: '2 weeks',
              owner: 'Inventory Manager',
              status: 'pending'
            }
          ],
          generatedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
          validUntil: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000).toISOString(),
          confidence: 84.6
        }
      ]

      const mockChatMessages: ChatMessage[] = [
        {
          id: 'msg-001',
          type: 'assistant',
          content: 'Hello! I\'m your AI assistant. I can help with customer inquiries, scheduling, technical support, and business insights. How can I assist you today?','
          timestamp: new Date(Date.now() - 10 * 60 * 1000).toISOString(),
          metadata: {
            intent: 'greeting',
            confidence: 0.98,
            suggestions: ['Check schedule', 'Customer lookup', 'Generate report']
          }
        }
      ]

      setModels(mockModels)
      setPredictions(mockPredictions)
      setInsights(mockInsights)
      setChatMessages(mockChatMessages)
    } catch (error) {
      console.error('Error fetching AI data:', error)
    } finally {
      setLoading(false)
    }
  }

  const initializeChat = () => {
    // Initialize chat session
  }

  const sendMessage = async () => {
    if (!chatInput.trim()) return

    const userMessage: ChatMessage = {
      id: 'msg-${Date.now()}',
      type: 'user',
      content: chatInput.trim(),
      timestamp: new Date().toISOString()
    }

    setChatMessages(prev => [...prev, userMessage])
    setChatInput(')

    // Simulate AI response
    setTimeout(() => {
      const responses = [
        'I can help you with that. Let me check our system for the latest information.',
        'Based on our data, I recommend the following approach...',
        'I found several relevant items in your system. Here\'s what I discovered: ',
        'Let me analyze that request and provide you with actionable insights.',
        'I\'ve processed your request. Here are the key findings: '
      ]

      const aiResponse: ChatMessage = {
        id: 'msg-${Date.now() + 1}',
        type: 'assistant',
        content: responses[Math.floor(Math.random() * responses.length)],
        timestamp: new Date().toISOString(),
        metadata: {
          intent: 'response',
          confidence: 0.89,
          suggestions: ['More details', 'Related topics', 'Export data']
        }
      }

      setChatMessages(prev => [...prev, aiResponse])
    }, 1500)
  }

  const getAIStats = () => {
    const totalPredictions = predictions.length
    const activePredictions = predictions.filter(p => p.status === 'pending' || p.status === 'monitoring').length
    const avgAccuracy = models.reduce((sum, model) => sum + model.accuracy, 0) / models.length
    const totalUsage = models.reduce((sum, model) => sum + model.usage.monthly, 0)
    const avgResponseTime = models.reduce((sum, model) => sum + model.performance.responseTime, 0) / models.length
    const highPriorityInsights = insights.filter(i => i.priority === 'high' || i.priority === 'critical').length
    const potentialRevenue = insights
      .filter(i => i.type === 'opportunity')
      .reduce((sum, insight) => sum + insight.impact.revenue, 0)

    return {
      totalPredictions,
      activePredictions,
      avgAccuracy,
      totalUsage,
      avgResponseTime,
      activeModels: models.filter(m => m.status === 'active').length,
      totalModels: models.length,
      highPriorityInsights,
      potentialRevenue
    }
  }

  const stats = getAIStats()

  const modelColumns = [
    {
      key: 'name',
      label: 'Model',
      render: (row: unknown) => (
        <div>
          <div className="font-medium text-white">{row.name}</div>
          <div className="text-sm text-neutral-400">{row.type.replace('_', ' ')}</div>
        </div>
      )
    },
    {
      key: 'status',
      label: 'Status',
      render: (row: unknown) => (
        <div className={'px-3 py-1 rounded-full text-sm font-medium ${
          row.status === 'active' ? 'bg-green-800 text-green-200' :
          row.status === 'training' ? 'bg-blue-800 text-blue-200' :
          row.status === 'inactive' ? 'bg-neutral-800 text-neutral-200' :
          'bg-red-800 text-red-200'
              }'}>'
          {row.status.toUpperCase()}
        </div>
      )
    },
    {
      key: 'accuracy',
      label: 'Accuracy',
      render: (row: unknown) => (
        <div className="flex items-center">
          <span className={'font-medium ${
            row.accuracy >= 90 ? 'text-green-400' :
            row.accuracy >= 80 ? 'text-yellow-400' : 'text-red-400'
              }'}>'
            {row.accuracy.toFixed(1)}%
          </span>
        </div>
      )
    },
    {
      key: 'usage.monthly',
      label: 'Monthly Usage',
      render: (row: unknown) => (
        <span className="text-neutral-300">{row.usage.monthly.toLocaleString()}</span>
      )
    },
    {
      key: 'performance.responseTime',
      label: 'Response Time',
      render: (row: unknown) => (
        <span className="text-neutral-300">{row.performance.responseTime}s</span>
      )
    },
    {
      key: 'version',
      label: 'Version',
      render: (row: unknown) => (
        <span className="font-mono text-sm text-blue-400">{row.version}</span>
      )
    }
  ]

  const predictionColumns = [
    {
      key: 'modelType',
      label: 'Model',
      render: (row: unknown) => (
        <span className="text-neutral-300 capitalize">{row.modelType.replace('_', ' ')}</span>
      )
    },
    {
      key: 'prediction.type',
      label: 'Prediction Type',
      render: (row: unknown) => (
        <span className="text-white">{row.prediction.type}</span>
      )
    },
    {
      key: 'prediction.value',
      label: 'Value',
      render: (row: unknown) => (
        <span className="text-blue-400 font-medium">{row.prediction.value}</span>
      )
    },
    {
      key: 'prediction.confidence',
      label: 'Confidence',
      render: (row: unknown) => (
        <div className="flex items-center">
          <div className={'w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold ${
            row.prediction.confidence >= 90 ? 'bg-green-800 text-green-200' :
            row.prediction.confidence >= 70 ? 'bg-yellow-800 text-yellow-200' :
            'bg-red-800 text-red-200'
              }'}>'
            {Math.round(row.prediction.confidence)}
          </div>
        </div>
      )
    },
    {
      key: 'status',
      label: 'Status',
      render: (row: unknown) => (
        <div className={'px-2 py-1 rounded text-sm font-medium ${
          row.status === 'confirmed' ? 'bg-green-800 text-green-200' :
          row.status === 'monitoring' ? 'bg-blue-800 text-blue-200' :
          row.status === 'rejected' ? 'bg-red-800 text-red-200' :
          'bg-neutral-800 text-neutral-200'
              }'}>'
          {row.status.toUpperCase()}
        </div>
      )
    },
    {
      key: 'createdAt',
      label: 'Created',
      render: (row: unknown) => (
        <span className="text-neutral-400 text-sm">
          {new Date(row.createdAt).toLocaleDateString()}
        </span>
      )
    }
  ]

  const renderOverview = () => (
    <div className="space-y-6">
      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-neutral-900 border border-neutral-800 rounded-lg p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="p-2 rounded-lg bg-neutral-800 text-purple-400">
              <Bot className="h-6 w-6" />
            </div>
            <div className="flex items-center text-sm text-green-400">
              <ArrowUp className="h-4 w-4 mr-1" />
              8.2%
            </div>
          </div>
          <div className="space-y-1">
            <h3 className="text-2xl font-bold text-white">{stats.activeModels}/{stats.totalModels}</h3>
            <p className="text-sm text-neutral-400">Active Models</p>
            <p className="text-xs text-neutral-500">{stats.avgAccuracy.toFixed(1)}% avg accuracy</p>
          </div>
        </div>

        <div className="bg-neutral-900 border border-neutral-800 rounded-lg p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="p-2 rounded-lg bg-neutral-800 text-blue-400">
              <Brain className="h-6 w-6" />
            </div>
            <div className="flex items-center text-sm text-green-400">
              <ArrowUp className="h-4 w-4 mr-1" />
              15.7%
            </div>
          </div>
          <div className="space-y-1">
            <h3 className="text-2xl font-bold text-white">{stats.totalPredictions}</h3>
            <p className="text-sm text-neutral-400">Predictions</p>
            <p className="text-xs text-neutral-500">{stats.activePredictions} active</p>
          </div>
        </div>

        <div className="bg-neutral-900 border border-neutral-800 rounded-lg p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="p-2 rounded-lg bg-neutral-800 text-green-400">
              <Zap className="h-6 w-6" />
            </div>
            <div className="flex items-center text-sm text-green-400">
              <ArrowDown className="h-4 w-4 mr-1" />
              12.3%
            </div>
          </div>
          <div className="space-y-1">
            <h3 className="text-2xl font-bold text-white">{stats.avgResponseTime.toFixed(1)}s</h3>
            <p className="text-sm text-neutral-400">Avg Response Time</p>
            <p className="text-xs text-neutral-500">{stats.totalUsage.toLocaleString()} monthly uses</p>
          </div>
        </div>

        <div className="bg-neutral-900 border border-neutral-800 rounded-lg p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="p-2 rounded-lg bg-neutral-800 text-yellow-400">
              <Lightbulb className="h-6 w-6" />
            </div>
            <div className="flex items-center text-sm text-green-400">
              <ArrowUp className="h-4 w-4 mr-1" />
              24.8%
            </div>
          </div>
          <div className="space-y-1">
            <h3 className="text-2xl font-bold text-white">{stats.highPriorityInsights}</h3>
            <p className="text-sm text-neutral-400">Priority Insights</p>
            <p className="text-xs text-neutral-500">${stats.potentialRevenue.toLocaleString()} potential</p>
          </div>
        </div>
      </div>

      {/* Model Performance Chart */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-neutral-900 border border-neutral-800 rounded-lg p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold text-white">Model Performance</h3>
            <BarChart3 className="h-5 w-5 text-neutral-400" />
          </div>
          <div className="h-64 flex items-center justify-center bg-neutral-800/50 rounded-lg">
            <div className="text-center">
              <BarChart3 className="h-12 w-12 text-neutral-600 mx-auto mb-2" />
              <p className="text-sm text-neutral-400">Model accuracy comparison</p>
              <p className="text-xs text-neutral-500 mt-1">{stats.activeModels} active models</p>
            </div>
          </div>
        </div>

        <div className="bg-neutral-900 border border-neutral-800 rounded-lg p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold text-white">Usage Analytics</h3>
            <LineChart className="h-5 w-5 text-neutral-400" />
          </div>
          <div className="h-64 flex items-center justify-center bg-neutral-800/50 rounded-lg">
            <div className="text-center">
              <LineChart className="h-12 w-12 text-neutral-600 mx-auto mb-2" />
              <p className="text-sm text-neutral-400">Monthly usage trends</p>
              <p className="text-xs text-neutral-500 mt-1">{stats.totalUsage.toLocaleString()} total requests</p>
            </div>
          </div>
        </div>
      </div>

      {/* Recent Insights */}
      <div className="bg-neutral-900 border border-neutral-800 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-6">Recent AI Insights</h3>
        <div className="space-y-4">
          {insights.slice(0, 3).map((insight) => (
            <div key={insight.id} className={'p-4 rounded-lg border-l-4 ${
              insight.type === 'opportunity' ? 'bg-green-900/20 border-green-500' :
              insight.type === 'warning' ? 'bg-red-900/20 border-red-500' :
              insight.type === 'recommendation' ? 'bg-blue-900/20 border-blue-500' :
              'bg-yellow-900/20 border-yellow-500`
              }'}>'
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center mb-2">
                    <div className={'px-2 py-1 rounded text-xs font-medium mr-3 ${
                      insight.priority === 'critical' ? 'bg-red-800 text-red-200' :
                      insight.priority === 'high' ? 'bg-orange-800 text-orange-200' :
                      insight.priority === 'medium' ? 'bg-yellow-800 text-yellow-200' :
                      'bg-neutral-800 text-neutral-200`
              }'}>'
                      {insight.priority.toUpperCase()}
                    </div>
                    <span className={'font-medium ${
                      insight.type === 'opportunity' ? 'text-green-400' :
                      insight.type === 'warning' ? 'text-red-400' :
                      insight.type === 'recommendation' ? 'text-blue-400' :
                      'text-yellow-400`
              }'}>'
                      {insight.title}
                    </span>
                  </div>
                  <p className="text-sm text-neutral-300 mb-2">{insight.description}</p>
                  <div className="flex items-center text-xs text-neutral-500">
                    <span>Confidence: {insight.confidence}%</span>
                    <span className="mx-2">•</span>
                    <span>Impact: ${Math.abs(insight.impact.revenue).toLocaleString()}</span>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  )

  const renderChat = () => (
    <div className="bg-neutral-900 border border-neutral-800 rounded-lg flex flex-col h-96">
      <div className="p-4 border-b border-neutral-800 flex items-center justify-between">
        <h3 className="text-lg font-semibold text-white">AI Assistant</h3>
        <div className="flex items-center gap-2">
          <div className={'w-3 h-3 rounded-full ${aiChatEnabled ? 'bg-green-500' : 'bg-red-500'
              }'}></div>'
          <span className="text-sm text-neutral-400">{aiChatEnabled ? 'Online' : 'Offline'}</span>
        </div>
      </div>
      
      <div className="flex-1 p-4 overflow-y-auto space-y-4">
        {chatMessages.map((message) => (
          <div key={message.id} className={'flex ${message.type === 'user' ? 'justify-end' : 'justify-start'
              }'}>'
            <div className={'max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
              message.type === 'user' 
                ? 'bg-blue-600 text-white' 
                : 'bg-neutral-800 text-neutral-200'
              }'}>'
              <p className="text-sm">{message.content}</p>
              <div className="flex justify-between items-center mt-2">
                <span className="text-xs opacity-70">
                  {new Date(message.timestamp).toLocaleTimeString()}
                </span>
                {message.metadata?.confidence && (
                  <span className="text-xs opacity-70">
                    {Math.round(message.metadata.confidence * 100)}%
                  </span>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="p-4 border-t border-neutral-800">
        <div className="flex gap-2">
          <input
            type="text"
            value={chatInput}
            onChange={(e) => setChatInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
            placeholder="Ask me anything..."
            className="flex-1 px-3 py-2 bg-neutral-800 border border-neutral-700 rounded-lg text-white placeholder-neutral-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <Button onClick={sendMessage} disabled={!chatInput.trim()} className="bg-blue-600 hover:bg-blue-700">
            <MessageSquare className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  )

  const renderTabContent = () => {
    switch (activeTab) {
      case 'overview':
        return renderOverview()
      case 'models':
        return (
          <div className="bg-neutral-900 border border-neutral-800 rounded-lg">
            <div className="p-6 border-b border-neutral-800">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-white">AI Models</h3>
                <Button className="bg-blue-600 hover:bg-blue-700">
                  <Plus className="h-4 w-4 mr-2" />
                  Deploy Model
                </Button>
              </div>
            </div>
            {/* @ts-ignore */}
            <DataTable 
              columns={modelColumns} 
              data={models}
              className="border-0"
              searchable={false}
            />
          </div>
        )
      case 'predictions':
        return (
          <div className="bg-neutral-900 border border-neutral-800 rounded-lg">
            <div className="p-6 border-b border-neutral-800">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-white">AI Predictions</h3>
                <div className="flex gap-2">
                  <Button variant="outline" className="bg-neutral-800 border-neutral-700">
                    <Filter className="h-4 w-4 mr-2" />
                    Filter
                  </Button>
                  <Button variant="outline" className="bg-neutral-800 border-neutral-700">
                    <Download className="h-4 w-4 mr-2" />
                    Export
                  </Button>
                </div>
              </div>
            </div>
            {/* @ts-ignore */}
            <DataTable 
              columns={predictionColumns} 
              data={predictions}
              className="border-0"
              searchable={false}
            />
          </div>
        )
      case 'insights':
        return (
          <div className="space-y-6">
            {insights.map((insight) => (
              <div key={insight.id} className="bg-neutral-900 border border-neutral-800 rounded-lg p-6">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex items-center">
                    <div className={'p-2 rounded-lg mr-3 ${
                      insight.type === 'opportunity' ? 'bg-green-800 text-green-400' :
                      insight.type === 'warning' ? 'bg-red-800 text-red-400' :
                      insight.type === 'recommendation' ? 'bg-blue-800 text-blue-400' :
                      'bg-yellow-800 text-yellow-400'
              }'}>'
                      {insight.type === 'opportunity' ? <TrendingUp className="h-5 w-5" /> :
                       insight.type === 'warning' ? <AlertTriangle className="h-5 w-5" /> :
                       insight.type === 'recommendation' ? <Lightbulb className="h-5 w-5" /> :
                       <BarChart3 className="h-5 w-5" />}
                    </div>
                    <div>
                      <h4 className="text-lg font-semibold text-white">{insight.title}</h4>
                      <div className="flex items-center gap-2 mt-1">
                        <div className={'px-2 py-1 rounded text-xs font-medium ${
                          insight.priority === 'critical' ? 'bg-red-800 text-red-200' :
                          insight.priority === 'high' ? 'bg-orange-800 text-orange-200' :
                          insight.priority === 'medium' ? 'bg-yellow-800 text-yellow-200' :
                          'bg-neutral-800 text-neutral-200`
              }'}>'
                          {insight.priority.toUpperCase()}
                        </div>
                        <span className="text-sm text-neutral-400">{insight.category}</span>
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-sm text-neutral-400">Confidence</div>
                    <div className="text-lg font-semibold text-white">{insight.confidence}%</div>
                  </div>
                </div>

                <p className="text-neutral-300 mb-4">{insight.description}</p>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                  <div className="bg-neutral-800/50 p-3 rounded-lg text-center">
                    <div className={'text-lg font-semibold ${
                      insight.impact.revenue > 0 ? 'text-green-400' : 'text-red-400`
              }'}>'
                      ${Math.abs(insight.impact.revenue).toLocaleString()}
                    </div>
                    <div className="text-sm text-neutral-400">Revenue Impact</div>
                  </div>
                  <div className="bg-neutral-800/50 p-3 rounded-lg text-center">
                    <div className="text-lg font-semibold text-blue-400">{insight.impact.efficiency}%</div>
                    <div className="text-sm text-neutral-400">Efficiency Gain</div>
                  </div>
                  <div className="bg-neutral-800/50 p-3 rounded-lg text-center">
                    <div className="text-lg font-semibold text-purple-400">{insight.impact.customer_satisfaction}%</div>
                    <div className="text-sm text-neutral-400">Customer Satisfaction</div>
                  </div>
                </div>

                <div>
                  <h5 className="text-sm font-medium text-white mb-3">Action Items</h5>
                  <div className="space-y-2">
                    {insight.actionItems.map((action) => (
                      <div key={action.id} className="flex items-center justify-between p-3 bg-neutral-800/30 rounded-lg">
                        <div className="flex items-center">
                          <div className={'w-3 h-3 rounded-full mr-3 ${
                            action.status === 'completed' ? 'bg-green-500' :
                            action.status === 'in_progress' ? 'bg-blue-500' : 'bg-neutral-500`
              }'}></div>'
                          <span className="text-neutral-300">{action.description}</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className={'px-2 py-1 rounded text-xs ${
                            action.priority === 'high' ? 'bg-red-800 text-red-200' :
                            action.priority === 'medium' ? 'bg-yellow-800 text-yellow-200' :
                            'bg-neutral-800 text-neutral-200'
              }'}>'
                            {action.priority}
                          </div>
                          <span className="text-sm text-neutral-400">{action.estimatedEffort}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )
      case 'chat':
        return renderChat()
      case 'settings':
        return (
          <div className="space-y-6">
            <div className="bg-neutral-900 border border-neutral-800 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-white mb-6">AI System Settings</h3>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-neutral-300 mb-2">AI Assistant Status</label>
                    <div className="flex items-center gap-2">
                      <Button
                        variant={aiChatEnabled ? 'default' : 'outline'}
                        size="sm"
                        onClick={() => setAiChatEnabled(true)}
                      >
                        <CheckCircle className="h-4 w-4 mr-2" />
                        Enabled
                      </Button>
                      <Button
                        variant={!aiChatEnabled ? 'default' : 'outline'}
                        size="sm"
                        onClick={() => setAiChatEnabled(false)}
                      >
                        <XCircle className="h-4 w-4 mr-2" />
                        Disabled
                      </Button>
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-neutral-300 mb-2">Auto-Training Schedule</label>
                    <select className="w-full p-2 bg-neutral-800 border border-neutral-700 rounded-lg text-white">
                      <option>Daily at 2 AM</option>
                      <option>Weekly on Sundays</option>
                      <option>Monthly</option>
                      <option>Manual Only</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-neutral-300 mb-2">Confidence Threshold</label>
                    <input 
                      type="range" 
                      min="50" 
                      max="95" 
                      defaultValue="75" 
                      className="w-full"
                    />
                    <div className="flex justify-between text-xs text-neutral-500 mt-1">
                      <span>50%</span>
                      <span>95%</span>
                    </div>
                  </div>
                </div>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-neutral-300 mb-2">Data Retention</label>
                    <select className="w-full p-2 bg-neutral-800 border border-neutral-700 rounded-lg text-white">
                      <option>30 Days</option>
                      <option>90 Days</option>
                      <option>1 Year</option>
                      <option>Indefinite</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-neutral-300 mb-2">API Rate Limit</label>
                    <input 
                      type="number" 
                      defaultValue="1000" 
                      className="w-full p-2 bg-neutral-800 border border-neutral-700 rounded-lg text-white"
                      placeholder="Requests per hour"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-neutral-300 mb-2">Notification Settings</label>
                    <div className="space-y-2">
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" defaultChecked />
                        <span className="text-sm text-neutral-300">Email alerts for critical insights</span>
                      </label>
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" defaultChecked />
                        <span className="text-sm text-neutral-300">Daily performance summaries</span>
                      </label>
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" />
                        <span className="text-sm text-neutral-300">Model training notifications</span>
                      </label>
                    </div>
                  </div>
                </div>
              </div>
              <div className="flex gap-3 mt-6">
                <Button className="bg-blue-600 hover:bg-blue-700">Save Settings</Button>
                <Button variant="outline" className="bg-neutral-800 border-neutral-700">Reset to Defaults</Button>
              </div>
            </div>
          </div>
        )
      default:
        return renderOverview()
    }
  }

  return (
    <div className="flex flex-col min-h-screen bg-neutral-950">
      {/* Header */}
      <div className="border-b border-neutral-800 bg-neutral-925">
        <div className="px-6 py-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h1 className="text-2xl font-semibold text-white">AI-Powered Features</h1>
              <p className="mt-1 text-sm text-neutral-400">
                Machine learning models, predictive analytics, and intelligent automation
              </p>
            </div>
            <div className="flex items-center gap-3">
              <Button 
                variant="outline" 
                size="sm"
                className="bg-neutral-900 border-neutral-700 text-neutral-300 hover:bg-neutral-800 hover:text-white"
              >
                <RefreshCw className="h-4 w-4 mr-2" />
                Refresh
              </Button>
              <Button 
                variant="outline"
                size="sm"
                className="bg-neutral-900 border-neutral-700 text-neutral-300 hover:bg-neutral-800 hover:text-white"
              >
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
            </div>
          </div>

          {/* Navigation Tabs */}
          <div className="flex space-x-1 bg-neutral-800/50 p-1 rounded-lg">
            {[
              { key: 'overview', label: 'Overview', icon: Brain },
              { key: 'models', label: 'Models', icon: Cpu },
              { key: 'insights', label: 'Insights', icon: Lightbulb },
              { key: 'predictions', label: 'Predictions', icon: Target },
              { key: 'chat', label: 'AI Chat', icon: MessageSquare },
              { key: 'settings', label: 'Settings', icon: Settings }
            ].map((tab) => (
              <Button
                key={tab.key}
                variant={activeTab === tab.key ? 'default' : 'ghost'}
                size="sm"
                onClick={() => setActiveTab(tab.key as any)}
                className={activeTab === tab.key 
                  ? 'bg-neutral-700 text-white' 
                  : 'text-neutral-400 hover:text-white hover:bg-neutral-700/50'
                }
              >
                <tab.icon className="h-4 w-4 mr-2" />
                {tab.label}
              </Button>
            ))}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 p-6">
        {loading ? (
          <div className="flex items-center justify-center h-64">
            <RefreshCw className="h-8 w-8 text-neutral-400 animate-spin" />
          </div>
        ) : (
          renderTabContent()
        )}
      </div>
    </div>
  )
}